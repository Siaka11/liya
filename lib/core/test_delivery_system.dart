import 'package:flutter/material.dart';
import 'package:liya/core/delivery_users_init.dart';
import 'package:liya/modules/delivery/presentation/pages/delivery_dashboard_page.dart';
import 'package:liya/modules/delivery/presentation/pages/delivery_assignment_page.dart';

class TestDeliverySystemPage extends StatefulWidget {
  const TestDeliverySystemPage({super.key});

  @override
  State<TestDeliverySystemPage> createState() => _TestDeliverySystemPageState();
}

class _TestDeliverySystemPageState extends State<TestDeliverySystemPage> {
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Test Syst√®me de Livraison'),
        backgroundColor: Colors.green,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'Syst√®me de Livraison Dynamique',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),

            // Description du syst√®me
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.green[50],
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.green[200]!),
              ),
              child: const Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Fonctionnalit√©s disponibles:',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text('‚Ä¢ Interface livreur dynamique avec disponibilit√©'),
                  Text('‚Ä¢ Gestion des commandes (restaurant et colis)'),
                  Text('‚Ä¢ Assignation automatique des commandes'),
                  Text('‚Ä¢ Suivi des gains et statistiques'),
                  Text('‚Ä¢ Historique des livraisons'),
                  Text('‚Ä¢ Syst√®me de notation'),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // Bouton d'initialisation
            ElevatedButton(
              onPressed: _isLoading ? null : _initializeSystem,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              child: _isLoading
                  ? const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor:
                                AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        ),
                        SizedBox(width: 12),
                        Text('Initialisation en cours...'),
                      ],
                    )
                  : const Text(
                      'üöÄ Initialiser le Syst√®me de Livraison',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
            ),
            const SizedBox(height: 16),

            // Bouton pour acc√©der √† l'interface admin
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const DeliveryAssignmentPage(),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              child: const Text(
                'üë®‚Äçüíº Interface Admin - G√©rer les Livraisons',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            const SizedBox(height: 16),

            // Bouton pour acc√©der √† l'interface livreur
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const DeliveryDashboardPage(),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              child: const Text(
                'üöö Interface Livreur - Tableau de Bord',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Informations sur les donn√©es de test
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue[50],
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.blue[200]!),
              ),
              child: const Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Donn√©es de test cr√©√©es:',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text('‚Ä¢ 5 livreurs avec diff√©rents niveaux d\'exp√©rience'),
                  Text('‚Ä¢ 5 commandes en attente (restaurant et colis)'),
                  Text('‚Ä¢ Statistiques de gains et livraisons'),
                  Text('‚Ä¢ Syst√®me de notation et √©valuations'),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _initializeSystem() async {
    setState(() {
      _isLoading = true;
    });

    try {
      await DeliveryUsersInitializer.initializeAll();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‚úÖ Syst√®me de livraison initialis√© avec succ√®s!'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Erreur lors de l\'initialisation: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
}
